loadstring(game:HttpGet("https://raw.githubusercontent.com/Imsleepyasf/wild/refs/heads/main/printcmds"))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local RunService = game:GetService("RunService")


local function waitForCharacter()
	repeat task.wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	return player.Character
end

local function teleportToPlace(placeId)
	TeleportService:Teleport(placeId)
end

local function tweenToPosition(cf)
	local char = waitForCharacter()
	local hrp = char:WaitForChild("HumanoidRootPart")
	TweenService:Create(hrp, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {CFrame = cf}):Play()
end

local function serverHop()
	local placeId = game.PlaceId
	local currentJob = game.JobId
	local servers = HttpService:JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100")).data
	local list = {}
	for _, server in ipairs(servers) do
		if server.playing < server.maxPlayers and server.id ~= currentJob then
			table.insert(list, server.id)
		end
	end
	if #list > 0 then
		TeleportService:TeleportToPlaceInstance(placeId, list[math.random(1, #list)])
	end
end

local function waitForText(text, timeout)
	local label = player.PlayerGui:WaitForChild("HUD"):WaitForChild("Bottom"):WaitForChild("ChatGui"):WaitForChild("TextLabel")
	local start = os.time()
	repeat task.wait() until label.Text == text or os.time() - start > timeout
	return label.Text == text
end

local function swapToSlot(slotNumber)
	local char = waitForCharacter()
	local bp = player:WaitForChild("Backpack")
	local st = bp:FindFirstChild("ServerTraits")
	local changer = workspace:WaitForChild("FriendlyNPCs"):FindFirstChild("Character Slot Changer")
	local label = player.PlayerGui:WaitForChild("HUD"):WaitForChild("Bottom"):WaitForChild("ChatGui"):WaitForChild("TextLabel")
	local timeout = 10

	local chatStart = st.ChatStart
	local chatAdv = st.ChatAdvance

	repeat task.wait() chatStart:FireServer(changer) until waitForText("Change Character Slots?", timeout)
	task.wait(0.2)
	repeat task.wait() chatAdv:FireServer({"Yes"}) until waitForText("Alright", timeout)
	task.wait(0.2)
	repeat task.wait() chatAdv:FireServer({"k"}) until waitForText("Which slot would you like to play in?", timeout)
	task.wait(0.2)
	chatAdv:FireServer({"Slot" .. tostring(slotNumber)})
end

local function onChat(msg)
	msg = msg:lower()

	-- Place teleports
	local placeMap = {
		["-earth"] = 536102540,
		["-namek"] = 882399924,
		["-space"] = 478132461,
		["-future"] = 569994010,
		["-sw"] = 2046990924,
		["-queue"] = 3565304751,
		["-zaros"] = 2651456105,
		["-heaven"] = 3552157537,
		["-htc"] = 882375367,
	}

	if placeMap[msg] then
		teleportToPlace(placeMap[msg])
		return
	end

	-- Server hop
	if msg == "-hop" then
		serverHop()
		return
	end

	-- Tween teleports
	local tweenMap = {
		["-south"] = CFrame.new(-457.22879, 27.98755, -6411.30957),
		["-west"] = CFrame.new(-571.08782, 22.98747, -2883.97436),
		["-central"] = CFrame.new(-3834.22168, 22.98756, -1428.07031),
		["-satan"] = CFrame.new(-5782.05908, 139.98769, -2742.61548),
		["-destroyed"] = CFrame.new(-6195.70654, 21.9875, -918.42224),
		["-broly"] = CFrame.new(2751.67725, 3944.85986, -2272.62622),
		["-top"] = CFrame.new(2508.15, 3945.41, -2029.8),
		["-htop"] = CFrame.new(2510.97656, 3944.75, -2527.53125),
		["-goku"] = CFrame.new(-5971.38, 21.07, -4235.23),
		["-jshop"] = CFrame.new(775.256531, 133.407135, 619.1604),
		["-kami"] = CFrame.new(2298.29, 3944.81, -2260.90),
		["-korin"] = CFrame.new(2045.31, 1494.56, -2278.30),
		["-senzu"] = CFrame.new(-3896.79, 23.99, -2042.31),
	}

	if tweenMap[msg] then
		tweenToPosition(tweenMap[msg])
		return
	end

	-- Slot switching
	if msg == "-slot1" then
		swapToSlot(1)
	elseif msg == "-slot2" then
		swapToSlot(2)
	elseif msg == "-slot3" then
		swapToSlot(3)
	end
end

-- Persistent connection (survives character changes)
local function bindChat()
	player.Chatted:Connect(onChat)
end

-- Rebind after every respawn
Players.LocalPlayer.CharacterAdded:Connect(function()
	task.wait(1)
	bindChat()
end)

-- Initial bind
bindChat()

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

local savedPosition = nil

local function hardReset()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        savedPosition = character.HumanoidRootPart.CFrame
        print("[HR] Saved position:", savedPosition)
        character:BreakJoints()
        print("[HR] Character reset triggered")
    else
        warn("[HR] Character or HumanoidRootPart missing")
    end
end

local function tweenToPosition(hrp, targetCFrame)
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})

    tween:Play()
    tween.Completed:Wait()
end

player.CharacterAdded:Connect(function(char)
    print("[HR] Character added")
    if savedPosition then
        local hrp = char:WaitForChild("HumanoidRootPart", 10)
        if hrp then
            task.wait(1) -- Wait for character to load fully
            print("[HR] Starting fast tween back to saved position")

            tweenToPosition(hrp, savedPosition)

            print("[HR] Arrived at saved position")
            savedPosition = nil
        else
            warn("[HR] HumanoidRootPart not found in time")
        end
    end
end)

player.Chatted:Connect(function(msg)
    local lowerMsg = msg:lower()
    if lowerMsg == "-hr" then
        hardReset()
    end
end)

-- Noclip control
local noclip = false
RunService.Stepped:Connect(function()
	if noclip and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		LocalPlayer.Character.Humanoid:ChangeState(11)
	end
end)

-- Wait for character
local function waitForCharacter()
	repeat task.wait() until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	return LocalPlayer.Character
end

-- Tween movement to a CFrame
local function tweenTo(cframe)
	local char = waitForCharacter()
	local hrp = char:WaitForChild("HumanoidRootPart")

	noclip = true
	local tween = TweenService:Create(hrp, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		CFrame = cframe
	})
	tween:Play()
	tween.Completed:Wait()
	noclip = false
end

-- Find a player whose name contains part of the query
local function findPlayerByNamePart(partial)
	partial = partial:lower()
	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= LocalPlayer and p.Name:lower():find(partial) then
			return p
		end
	end
end

-- Handle chat commands
LocalPlayer.Chatted:Connect(function(msg)
	local args = msg:lower():split(" ")
	if args[1] == "-tp" and args[2] then
		local query = table.concat(args, " ", 2)
		local targetPlayer = findPlayerByNamePart(query)

		if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
			local targetHRP = targetPlayer.Character.HumanoidRootPart
			local offsetCF = targetHRP.CFrame * CFrame.new(0, 0, -3) -- 3 studs in front
			tweenTo(offsetCF)
		else
			warn("No matching player found for: " .. query)
		end
	end
end)

LocalPlayer.Chatted:Connect(function(msg)
	local args = msg:lower():split(" ")

	if args[1] == "-tp" and args[2] then
		local query = table.concat(args, " ", 2)
		local targetPlayer = findPlayerByNamePart(query)

		if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
			local targetHRP = targetPlayer.Character.HumanoidRootPart
			local offsetCF = targetHRP.CFrame * CFrame.new(0, 0, -3) -- 3 studs in front
			tweenTo(offsetCF)
		else
			warn("No matching player found for: " .. query)
		end
		return
	end

	if msg == "-rj" then
		local placeId = game.PlaceId
		local jobId = game.JobId
		TeleportService:TeleportToPlaceInstance(placeId, jobId)
		return
	end
end)

local plr = game.Players.LocalPlayer
plr.Chatted:Connect(function(msg)
    msg = msg:lower()
    if msg == "-red" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Imsleepyasf/wild/refs/heads/main/redquest.", true))()
    end
end)

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local function reset()
	local char = player.Character
	if not char then return end

	local humanoid = char:FindFirstChildOfClass("Humanoid")
	if humanoid and humanoid.Health > 0 then
		humanoid.Health = 0
	end
end

-- Listen for chat messages from the local player
player.Chatted:Connect(function(msg)
	if msg == "-reset" then
		reset()
	end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local flingConnection

-- Get player from partial name
local function getPlayerFromPartial(name)
	for _, p in ipairs(Players:GetPlayers()) do
		if p.Name:lower():sub(1, #name) == name:lower() then
			return p
		end
	end
end

-- Tween back to original position
local function returnToPosition(originalCFrame)
	local character = LocalPlayer.Character
	if not character then return end
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local tween = TweenService:Create(hrp, TweenInfo.new(0.5), { CFrame = originalCFrame })
	tween:Play()
end

-- Main fling logic
local function flingPlayer(targetPlayer)
	if flingConnection then
		flingConnection:Disconnect()
	end

	local character = LocalPlayer.Character
	if not character then return end
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local originalCFrame = hrp.CFrame

	local targetChar = targetPlayer.Character
	if not targetChar then return end
	local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end

	-- Fling loop
	flingConnection = RunService.Heartbeat:Connect(function()
		if hrp and targetHRP then
			hrp.CFrame = targetHRP.CFrame + Vector3.new(0, 0.5, 0)
			hrp.Velocity = Vector3.new(9999, 9999, 9999)
			hrp.RotVelocity = Vector3.new(9999, 9999, 9999)
		end
	end)

	-- After 5 seconds, stop flinging and return to original position
	task.delay(5, function()
		if flingConnection then
			flingConnection:Disconnect()
			flingConnection = nil
		end
		returnToPosition(originalCFrame)
	end)
end

-- Chat listener
LocalPlayer.Chatted:Connect(function(msg)
	if msg:lower():sub(1,7) == "-fling " then
		local name = msg:sub(8)
		local target = getPlayerFromPartial(name)
		if target then
			flingPlayer(target)
		else
			warn("No player found with name starting: " .. name)
		end
	end
end)


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local hairStylist = workspace:WaitForChild("FriendlyNPCs"):WaitForChild("Hair Stylist")

-- Wait until the ServerTraits and required remotes exist
local function waitForRemotes()
    repeat task.wait() until player.Backpack and player.Backpack:FindFirstChild("ServerTraits")
    local traits = player.Backpack.ServerTraits
    repeat task.wait() until traits:FindFirstChild("ChatStart") and traits:FindFirstChild("ChatAdvance")
    return traits.ChatStart, traits.ChatAdvance
end

local function fastTalkToHairStylist()
    local chatStart, chatAdvance = waitForRemotes()

    -- Start the conversation with Hair Stylist
    chatStart:FireServer(hairStylist)
    task.wait(0.2)

    -- Keep advancing dialogue fast until the "HairScript" appears in Backpack
    repeat
        chatAdvance:FireServer({"Yes"})
        RunService.RenderStepped:Wait()
    until player.Backpack:FindFirstChild("HairScript")

    -- Fire the HairScript RemoteEvent to finish
    local hairScript = player.Backpack:FindFirstChild("HairScript")
    if hairScript then
        local remote = hairScript:FindFirstChild("RemoteEvent")
        if remote then
            remote:FireServer("woah")
            RunService.RenderStepped:Wait()
            if remote and remote.Parent then
                remote:FireServer("woah")
            end
        end
    end
end

-- Listen to player chat and trigger on "-hair"
player.Chatted:Connect(function(msg)
    if msg:lower() == "-hair" then
        fastTalkToHairStylist()
    end
end)
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end  -- Ignore if the game already processed the input
    
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.Period then  -- This is the '.' key
            fastTalkToHairStylist()
        end
    end
end)

local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local virtualInput = game:GetService("VirtualInputManager")

local isFrozen = false
local freezeTween = nil
local frozenPosition = nil
local isSpamming = false

-- Function to freeze the character
local function freezeCharacter()
    local character = player.Character
    if character then
        isFrozen = true
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart then
            frozenPosition = humanoidRootPart.CFrame -- Save position before freezing

            -- Tween to keep the character in place
            freezeTween = tweenService:Create(
                humanoidRootPart,
                TweenInfo.new(0.01, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, -1, true),
                { CFrame = frozenPosition }
            )
            freezeTween:Play()

            -- Disable movement
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 0
                humanoid.JumpHeight = 0
                humanoid.PlatformStand = true
            end
        end
    end
end

-- Function to unfreeze the character
local function unfreezeCharacter()
    local character = player.Character
    if character then
        isFrozen = false
        if freezeTween then
            freezeTween:Cancel()
            freezeTween = nil
        end

        -- Restore movement
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
            humanoid.JumpHeight = 50
            humanoid.PlatformStand = false
        end
    end
end

-- Function to handle character respawn (fixing hard reset issue)
local function onCharacterAdded(character)
    task.wait(1) -- Wait for character to fully load
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    -- If the character was frozen before reset, teleport back and refreeze
    if isFrozen and frozenPosition then
        humanoidRootPart.CFrame = frozenPosition
        task.wait(0.5) -- Small delay to avoid issues
        freezeCharacter() -- Reapply freeze
    end
end

-- Listen for character respawn
player.CharacterAdded:Connect(onCharacterAdded)

-- Function to stop the spam feature
local function stopSpam()
    isSpamming = false
end

-- Function to use the jar and reset repeatedly
local function useJarAndReset()
    isSpamming = true
    while isSpamming do
        local character = player.Character
        if character then
            -- Automatically use the jar
            virtualInput:SendKeyEvent(true, Enum.KeyCode.C, false, game)
            wait(1) -- Small delay before resetting
            
            -- Hard reset (forces respawn)
            character:BreakJoints()
        end
        wait(5) -- Time before looping again
    end
end

-- Listen for chat commands (merged)
player.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    
    if lowerMessage == ".on" then
        freezeCharacter()
        if not isSpamming then
            task.spawn(useJarAndReset)
        end
    elseif lowerMessage == ".off" then
        unfreezeCharacter()
        stopSpam()
    end
end)

if game.PlaceId == 536102540 then

    local player = game.Players.LocalPlayer
    local runService = game:GetService("RunService")
    local tweenService = game:GetService("TweenService")
    local virtualInput = game:GetService("VirtualInputManager")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local isFrozen = false
    local freezeTween = nil
    local frozenPosition = nil
    local isSpamming = false

    local spawnPartName = "CustomPlayerSpawn"

    -- Reference to Hair Stylist NPC (adjust path if needed)
    local hairStylist = workspace:WaitForChild("FriendlyNPCs"):WaitForChild("Hair Stylist")

    -- Wait for Chat remotes under ServerTraits in Backpack
    local function waitForRemotes()
        repeat task.wait() until player.Backpack and player.Backpack:FindFirstChild("ServerTraits")
        local traits = player.Backpack.ServerTraits
        repeat task.wait() until traits:FindFirstChild("ChatStart") and traits:FindFirstChild("ChatAdvance")
        return traits.ChatStart, traits.ChatAdvance
    end

    -- Fast talk to Hair Stylist NPC
    local function fastTalkToHairStylist()
        local chatStart, chatAdvance = waitForRemotes()

        chatStart:FireServer(hairStylist)
        task.wait(0.2)

        repeat
            chatAdvance:FireServer({"Yes"})
            runService.RenderStepped:Wait()
        until player.Backpack:FindFirstChild("HairScript")

        local hairScript = player.Backpack:FindFirstChild("HairScript")
        if hairScript then
            local remote = hairScript:FindFirstChild("RemoteEvent")
            if remote then
                remote:FireServer("woah")
                runService.RenderStepped:Wait()
                if remote and remote.Parent then
                    remote:FireServer("woah")
                end
            end
        end
    end

    -- Create or update spawn location part at given CFrame (anchored at feet, invisible, no collision)
    local function createOrUpdateSpawnLocation(cframe)
        local existingSpawn = workspace:FindFirstChild(spawnPartName)
        local partSize = Vector3.new(6, 1, 6)
        local spawnCFrame = cframe * CFrame.new(0, -partSize.Y / 2, 0) -- lower by half part size so feet are on ground

        if existingSpawn then
            existingSpawn.CFrame = spawnCFrame
        else
            local spawnPart = Instance.new("SpawnLocation")
            spawnPart.Name = spawnPartName
            spawnPart.Anchored = true
            spawnPart.CanCollide = false
            spawnPart.Size = partSize
            spawnPart.CFrame = spawnCFrame
            spawnPart.Transparency = 1
            spawnPart.Neutral = true
            spawnPart.AllowTeamChangeOnTouch = false
            spawnPart.Parent = workspace
        end
    end

    -- Remove the custom spawn point from workspace
    local function removeCustomSpawn()
        local spawn = workspace:FindFirstChild(spawnPartName)
        if spawn then
            spawn:Destroy()
        end
    end

    -- Function to freeze the character
    local function freezeCharacter()
        local character = player.Character
        if character then
            isFrozen = true
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                frozenPosition = humanoidRootPart.CFrame
                createOrUpdateSpawnLocation(frozenPosition)

                freezeTween = tweenService:Create(
                    humanoidRootPart,
                    TweenInfo.new(0.01, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, -1, true),
                    { CFrame = frozenPosition }
                )
                freezeTween:Play()

                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 0
                    humanoid.JumpHeight = 0
                    humanoid.PlatformStand = true
                end
            end
        end
    end

    -- Function to unfreeze the character
    local function unfreezeCharacter()
        local character = player.Character
        if character then
            isFrozen = false
            if freezeTween then
                freezeTween:Cancel()
                freezeTween = nil
            end

            removeCustomSpawn()

            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
                humanoid.JumpHeight = 50
                humanoid.PlatformStand = false
            end
        end
    end

    -- Handle character respawn and reposition if frozen
    local function onCharacterAdded(character)
        task.wait(1)
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if isFrozen and frozenPosition then
            humanoidRootPart.CFrame = frozenPosition
            task.wait(0.5)
            freezeCharacter()
        end
    end

    player.CharacterAdded:Connect(onCharacterAdded)

    local function stopSpam()
        isSpamming = false
    end

    local function useJarTalkHairAndTeleport()
        isSpamming = true
        while isSpamming do
            local character = player.Character
            if character then
                virtualInput:SendKeyEvent(true, Enum.KeyCode.C, false, game)
                task.wait(1)

                fastTalkToHairStylist()

                if frozenPosition and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = frozenPosition
                end
            end
            task.wait(2)
        end
    end

    player.Chatted:Connect(function(message)
        local lowerMessage = message:lower()

        if lowerMessage == "-spam" then
            freezeCharacter()
            if not isSpamming then
                task.spawn(useJarTalkHairAndTeleport)
            end
        elseif lowerMessage == "-stop" then
            unfreezeCharacter()
            stopSpam()
        end
    end)

end

local player = game.Players.LocalPlayer

-- Helper: find player from partial name
local function getPlayerFromPartialName(partialName)
    partialName = partialName:lower()
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():find(partialName, 1, true) then
            return p
        end
    end
    return nil
end

-- Extract number from text using keyword (like "Lvl" or "Prestige")
local function extractNumberFromName(name, keyword)
    local pattern = keyword .. "[^%d]*(%d+)"
    local number = string.match(name, pattern)
    return number
end

-- Searches descendants for Level or Prestige
local function getStatByGuessing(folder, keyword)
    for _, child in ipairs(folder:GetDescendants()) do
        if string.lower(child.Name):find(keyword:lower()) then
            if child:IsA("TextLabel") and child.Text then
                local val = extractNumberFromName(child.Text, keyword)
                if val then return val end
            elseif child.Name then
                local val = extractNumberFromName(child.Name, keyword)
                if val then return val end
            end
        end
    end
    return "N/A"
end

-- Get value from folder safely
local function getStatValue(folder, name)
    local val = folder:FindFirstChild(name)
    if val and (val:IsA("NumberValue") or val:IsA("IntValue") or val:IsA("DoubleConstrainedValue") or val:IsA("StringValue")) then
        return val.Value
    end
    return "N/A"
end

-- Function to print another player's stats
local function printPlayerStats(targetPlayer)
    local liveFolder = workspace:FindFirstChild("Live")
    if not liveFolder then
        warn("Live folder not found.")
        return
    end

    local playerModel = liveFolder:FindFirstChild(targetPlayer.Name)
    if not playerModel then
        warn("Player model not found in Live: " .. targetPlayer.Name)
        return
    end

    local statsFolder = playerModel:FindFirstChild("Stats")
    if not statsFolder then
        warn("Stats folder not found for player: " .. targetPlayer.Name)
        return
    end

    print("======================================================")
    print("Name: " .. targetPlayer.Name)

    local raceVal = getStatValue(statsFolder, "Race")
    if raceVal == "N/A" then
        raceVal = getStatValue(playerModel, "Race")
    end
    print("Race: " .. raceVal)

    print("Level: " .. getStatByGuessing(playerModel, "Lvl"))
    print("Prestige: " .. getStatByGuessing(playerModel, "Prestige"))

    local statNames = {
        ["Health-Max"] = "HP",
        ["Ki-Max"] = "Ki Max",
        ["Phys-Damage"] = "Phys Damage",
        ["Ki-Damage"] = "Ki Damage",
        ["Phys-Resist"] = "Phys Resistance",
        ["Ki-Resist"] = "Ki Resistance",
        ["Speed"] = "Speed"
    }

    local totalStats = 0

    for internalName, displayName in pairs(statNames) do
        local value = getStatValue(statsFolder, internalName)
        print(displayName .. ": " .. value)
        if typeof(value) == "number" then
            totalStats += value
        end
    end

    print("Total Stats = " .. totalStats)
    print("======================================================\n")
end

-- Debounce variables
local lastCommandTime = 0
local debounceTime = 1

-- Chat command listener
player.Chatted:Connect(function(message)
    local currentTime = tick()
    if currentTime - lastCommandTime < debounceTime then return end
    lastCommandTime = currentTime

    local lower = message:lower()
    if lower:sub(1, 7) == "-stats " then
        local nameQuery = message:sub(8):gsub("^%s+", ""):gsub("%s+$", "")
        if nameQuery ~= "" then
            local target = getPlayerFromPartialName(nameQuery)
            if target then
                printPlayerStats(target)
            else
                warn("No player found matching: " .. nameQuery)
            end
        else
            warn("Please provide a name after -stats.")
        end
    end
end)
